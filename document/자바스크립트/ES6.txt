1. 추가변수 지역변수
lef  : (변수)
const : (상수)

2. 백틱 ``사용가능
const url = `http://colley0326.dothome.co.kr/bd.js?${id}`
const txt = `텍스트는 마음데로 뛸수있지
	후후`

3. 함수의 기본매개 변수값 지정
function test ( height =10 , width = 20, color = 'green' ) {}

4. 화살표 함수
ES6 에서는 축약형 함수인 화살표 함수를 사용할 수 있다. 
특이한 점이 있다면 화살표 함수에서 this 는 함수 자신을 호출하는 객체가 아닌
화살표 함수의 상위 스코프 (scope) 를 호출한다.

const numbers = [ 1, 2, 3, 4, 5 ];

let choice = numbers.map( v => v + 1);    //축약 형태로 return 도 생략 가능

const noah = {
	name : "noah",
	friend : [ "mimi" ],
	printFriends() { 
		this.friend.forEach( f => 
		console.log(` ${this.name} loves ${f}`)); 
	}
};

noah.printFriends();    // 결과값 : noah loves mimi

5.비구조화 할당 (destructuring Assignment)

//객체 
const blog = {
owner : "noah",
url : "noahlogs.tistory.com",
getPost() { console.log("ES6 문법 정리"); }
};

let { owner, getPost } = blog;       //각각 blog 객체의 owner , getPost() 의 데이터가 할당


//배열
const pocket = ["coin" , 10 , true];
const [ first , second, third ] = pocket;    //배열의 순서대로 값이 할당

6.프로미스 (Promise)

프로미스는 자바스크립트의 비동기 처리에 사용되는 객체이다. 
콜백 지옥에서 벗어나게 해주는 유용한 기능이다 :) 
ES8 (ECMAScript 2017) 에서 async/await 이 생겨나면서 프로미스에서 처리할 수 없던 순서 처리를 
할 수 있게 되었다. 필요할 때 사용하면 될 것 같다. 

const connect = new Promise((resolve, reject) => {
	//success = resolve , fail = reject 반환 
});

connect.then( (success) => { 
console.log(success);
//성공 한 다음 처리할 작업 
}).catch( (error) => {
console.log(error);
//에러 예외 처리
});

